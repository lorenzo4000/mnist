@import "model.myc"

// distort entire image set
function distort_set(:image_set [][784]f32, :out [][784]f32, :nd *NormalDistribution) {
	for(:i uint32 = 0; i < [uint32]image_set.len; i++) {
		// copy it
		:image [28][28]f32;
		for(:r uint32 = 0; r < 28; r++) {
			for(:c uint32 = 0; c < 28; c++) {
				image[r][c] = image_set[i][r * 28 + c];
			}
		}

		image = elastic_distortion(image, nd, 8.0, 5.0);

		// copy into result
		for(:r uint32 = 0; r < 28; r++) {
			for(:c uint32 = 0; c < 28; c++) {
				out[i][r * 28 + c] = image[r][c];
			}
		}

		printf("image: %u\n".data, i);
	}
}

function main() {
	:images [][28][28]uint8 = read_dataset_image("training_set/train-images-idx3-ubyte");
	:labels []     uint8 = read_dataset_label("training_set/train-labels-idx1-ubyte");
	
	printf("%llx\n".data, images.len);

	// cast image set to f32 range [-1.0, 1.0]
	:image_set [][784]f32 = allocate(28*28*images.len*4);
	for(:i uint32 = 0; i < [uint32]image_set.len; i++) {
		for(:r uint32 = 0; r < 28; r++) {
			for(:c uint32 = 0; c < 28; c++) {
				:pixel uint8 = images[i][r][c];
				image_set[i][r * 28 + c] = [f32]pixel / 127.5 - 1.0;
			}
		}
	}
	
	// cast label set to binary vector (still f32 because math)
	:label_set [][10]f32 = allocate(labels.len*4*10);
	for(:i uint32 = 0; i < [uint32]label_set.len; i++) {
		:answer uint8 = labels[i];
		label_set[i][answer] = 1.0;	
	}

	
	:neural_network [][]Neuron = nn();
	for(:i int32 = 0; i < [int32]neural_network.len; i++) {
		printf("layers[%u]: %u\n".data, i, neural_network[i].len);
	}

	// ** initialize weights
	:normal_distribution NormalDistribution = init_normal(time(0));
	{
		:l int32 = 0;
		for(:i int32 = 0; i < [int32]neural_network[l].len; i++) {
			for(:j int32 = 0; j < [int32]neural_network[l][i].weights.len; j++) {
				neural_network[l][i].weights[j] = [f32]normal(&normal_distribution, 1.0, 0.0) * sqrtf(1.0 / 784.0);
			}
			neural_network[l][i].bias = [f32]normal(&normal_distribution, 1.0, 0.0) * sqrtf(1.0 / 784.0);
		}
	}
	{
		:l int32 = 1;
		for(:i int32 = 0; i < [int32]neural_network[l].len; i++) {
			for(:j int32 = 0; j < [int32]neural_network[l][i].weights.len; j++) {
				neural_network[l][i].weights[j] = [f32]normal(&normal_distribution, 1.0, 0.0) * sqrtf(1.0 / 800.0);
			}
			neural_network[l][i].bias = [f32]normal(&normal_distribution, 1.0, 0.0) * sqrtf(1.0 / 800.0);
		}
	}

	for(:n int32 = 0; n < [int32]neural_network[0].len; n++) {
		printf("weights:\n".data);
		for(:r uint32 = 0; r < 28; r++) {
			for(:c uint32 = 0; c < 28; c++) {
				printf("%f ".data, [f64]neural_network[0][n].weights[r * 28 + c]);
			}
			printf("\n".data);
		}

		printf("bias: %f\n".data, [f64]neural_network[0][n].bias);
	}


	for(:n int32 = 0; n < [int32]neural_network[1].len; n++) {
		printf("weights:\n".data);
		for(:r uint32 = 0; r < 800; r++) {
			printf("%f ".data, [f64]neural_network[1][n].weights[r]);
		}
		putchar('\n');

		printf("bias: %f\n".data, [f64]neural_network[1][n].bias);
	}


	:f_out ForwardOut = ForwardOut{
		allocate(2 * 16),
		allocate(2 * 16),
	};

	f_out.a[0] = allocate(800 * 4);
	f_out.a[1] = allocate(10 * 4);
	f_out.z[0] = allocate(800 * 4);
	f_out.z[1] = allocate(10 * 4);
	

	:nd NormalDistribution = init_normal(time(null));
	:distorted_image_set [][784]f32 = allocate(28*28*images.len*4);

	:epoch int32 = 0;
	while true {
		epoch++;

		distort_set(image_set, distorted_image_set, &nd);

		:cost  f32 = 0.0;
		:error f32 = 0.0;
		for(:i int32 = 0; i < [int32]distorted_image_set.len; i++) {
			forward(neural_network, distorted_image_set[i], f_out);
			back(neural_network, distorted_image_set[i], f_out.a, label_set[i], 0.001);
			
			:probability_distribution []f32 = f_out.a[1];

			:l f32 = loss(probability_distribution, label_set[i]);
			cost += l / [f32](i + 1 + [int32]distorted_image_set.len * epoch);
		
			:prediction uint64 = max(probability_distribution);
			if [uint8]prediction != labels[i] {
				error += 1.0 / [f32](i + 1 + [int32]distorted_image_set.len * epoch);
			}
	
			clear_line();
			print_status(epoch, i, l, cost, error);
		}
	
		// end of epoch
		// ** save checkpoint
		save_model("saved_models/model_checkpoint.bin", neural_network);
	}
}
