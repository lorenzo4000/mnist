@import "examples/softmax_mcnn/model.myc"
// *** raylib ***

//
// ** structs

// Color, 4 components, R8G8B8A8 (32bit)
// typedef struct Color {
//    unsigned char r;        // Color red value
//    unsigned char g;        // Color green value
//    unsigned char b;        // Color blue value
//    unsigned char a;        // Color alpha value
// Color;
struct Color {
	:r uint8;
	:g uint8;
	:b uint8;
	:a uint8;
}

//
// ** Window-related functions

// RLAPI void InitWindow(int width, int height, const char *title);  // Initialize window and OpenGL context
function InitWindow(:width int32, :height int32, :title *uint8) external;

// RLAPI bool WindowShouldClose(void);                               // Check if KEY_ESCAPE pressed or Close icon pressed
function WindowShouldClose() bool external;

// RLAPI void CloseWindow(void);                                     // Close window and unload OpenGL context
function CloseWindow() external;

// ** Drawing-related functions
// RLAPI void ClearBackground(Color color);                          // Set background color (framebuffer clear color)
function ClearBackground(:color Color) external;

// RLAPI void BeginDrawing(void);                                    // Setup canvas (framebuffer) to start drawing
function BeginDrawing() external;

// RLAPI void EndDrawing(void);                                      // End canvas drawing and swap buffers (double buffering)
function EndDrawing() external;

//
// ** Basic shapes drawing functions

// RLAPI void DrawRectangle(int posX, int posY, int width, int height, Color color);                        // Draw a color-filled rectangle
function DrawRectangle(:poxX int32, :posY int32, :width int32, :height int32, :color Color) external;

// RLAPI void DrawRectangleLines(int posX, int posY, int width, int height, Color color);                   // Draw rectangle outline
function DrawRectangleLines(:poxX int32, :posY int32, :width int32, :height int32, :color Color) external;

//
// ** Input-related functions: mouse

// RLAPI bool IsMouseButtonPressed(int button);                  // Check if a mouse button has been pressed once
function IsMouseButtonPressed(:button int32) bool external;

// RLAPI bool IsMouseButtonDown(int button);                     // Check if a mouse button is being pressed
function IsMouseButtonDown(:button int32) bool external;

// RLAPI bool IsMouseButtonReleased(int button);                 // Check if a mouse button has been released once
function IsMouseButtonReleased(:button int32) bool external;

// RLAPI bool IsMouseButtonUp(int button);                       // Check if a mouse button is NOT being pressed
function IsMouseButtonUp(:button int32) bool external;

// RLAPI int GetMouseX(void);                                    // Get mouse position X
function GetMouseX() int32 external;

// RLAPI int GetMouseY(void);                                    // Get mouse position Y
function GetMouseY() int32 external;

//
// ** Input-related functions: keyboard
// RLAPI bool IsKeyPressed(int key);                             // Check if a key has been pressed once
function IsKeyPressed(:key int32) bool external;

// RLAPI bool IsKeyDown(int key);                                // Check if a key is being pressed
function IsKeyDown(:key int32) bool external;

// RLAPI bool IsKeyReleased(int key);                            // Check if a key has been released once
function IsKeyReleased(:key int32) bool external;

// RLAPI bool IsKeyUp(int key);                                  // Check if a key is NOT being pressed
function IsKeyUp(:key int32) bool external;

// distort entire image set
function distort_set(:image_set [][784]f32, :out [][784]f32, :nd *NormalDistribution) {
	for(:i uint32 = 0; i < [uint32]image_set.len; i++) {
		// copy it
		:image [28][28]f32;
		for(:r uint32 = 0; r < 28; r++) {
			for(:c uint32 = 0; c < 28; c++) {
				image[r][c] = image_set[i][r * 28 + c];
			}
		}

		image = elastic_distortion(image, nd, 8.0, 5.0);

		// copy into result
		for(:r uint32 = 0; r < 28; r++) {
			for(:c uint32 = 0; c < 28; c++) {
				out[i][r * 28 + c] = image[r][c];
			}
		}

		printf("image: %u\n".data, i);
	}
}

function main() {
	:images [][28][28]uint8 = read_dataset_image("./examples/softmax_mcnn/training_set/train-images-idx3-ubyte");
	:labels []     uint8 = read_dataset_label("./examples/softmax_mcnn/training_set/train-labels-idx1-ubyte");
	
	printf("%llx\n".data, images.len);

	// cast image set to f32 range [-1.0, 1.0]
	:image_set [][784]f32 = allocate(28*28*images.len*4);
	for(:i uint32 = 0; i < [uint32]image_set.len; i++) {
		for(:r uint32 = 0; r < 28; r++) {
			for(:c uint32 = 0; c < 28; c++) {
				:pixel uint8 = images[i][r][c];
				image_set[i][r * 28 + c] = [f32]pixel / 127.5 - 1.0;
			}
		}
	}
	
	// cast label set to binary vector (still f32 because math)
	:label_set [][10]f32 = allocate(labels.len*4*10);
	for(:i uint32 = 0; i < [uint32]label_set.len; i++) {
		:answer uint8 = labels[i];
		label_set[i][answer] = 1.0;	
	}

	
	:neural_network [][]Neuron = nn();
	for(:i int32 = 0; i < [int32]neural_network.len; i++) {
		printf("layers[%u]: %u\n".data, i, neural_network[i].len);
	}

	// ** initialize weights
	:normal_distribution NormalDistribution = init_normal(time(0));
	{
		:l int32 = 0;
		for(:i int32 = 0; i < [int32]neural_network[l].len; i++) {
			for(:j int32 = 0; j < [int32]neural_network[l][i].weights.len; j++) {
				neural_network[l][i].weights[j] = [f32]normal(&normal_distribution, 1.0, 0.0) * sqrtf(1.0 / 784.0);
			}
			neural_network[l][i].bias = [f32]normal(&normal_distribution, 1.0, 0.0) * sqrtf(1.0 / 784.0);
		}
	}
	{
		:l int32 = 1;
		for(:i int32 = 0; i < [int32]neural_network[l].len; i++) {
			for(:j int32 = 0; j < [int32]neural_network[l][i].weights.len; j++) {
				neural_network[l][i].weights[j] = [f32]normal(&normal_distribution, 1.0, 0.0) * sqrtf(1.0 / 800.0);
			}
			neural_network[l][i].bias = [f32]normal(&normal_distribution, 1.0, 0.0) * sqrtf(1.0 / 800.0);
		}
	}

	for(:n int32 = 0; n < [int32]neural_network[0].len; n++) {
		printf("weights:\n".data);
		for(:r uint32 = 0; r < 28; r++) {
			for(:c uint32 = 0; c < 28; c++) {
				printf("%f ".data, [f64]neural_network[0][n].weights[r * 28 + c]);
			}
			printf("\n".data);
		}

		printf("bias: %f\n".data, [f64]neural_network[0][n].bias);
	}


	for(:n int32 = 0; n < [int32]neural_network[1].len; n++) {
		printf("weights:\n".data);
		for(:r uint32 = 0; r < 800; r++) {
			printf("%f ".data, [f64]neural_network[1][n].weights[r]);
		}
		putchar('\n');

		printf("bias: %f\n".data, [f64]neural_network[1][n].bias);
	}


	:f_out ForwardOut = ForwardOut{
		allocate(2 * 16),
		allocate(2 * 16),
	};

	f_out.a[0] = allocate(800 * 4);
	f_out.a[1] = allocate(10 * 4);
	f_out.z[0] = allocate(800 * 4);
	f_out.z[1] = allocate(10 * 4);
	

	:nd NormalDistribution = init_normal(time(null));
	:distorted_image_set [][784]f32 = allocate(28*28*images.len*4);

	:epoch int32 = 0;
	while true {
		epoch++;

		distort_set(image_set, distorted_image_set, &nd);

		// :PIXEL_SCALE int32 = 20;

		// :WIDTH int32 = 28;
		// :HEIGHT int32 = 28;
		// :image [28][28]f32;
		// :i int32 = 0;
		// InitWindow(WIDTH * PIXEL_SCALE, HEIGHT * PIXEL_SCALE, "MNIST!".data);
		// while !WindowShouldClose()  {
		// 	// :mouse_x int32 = GetMouseX();
		// 	// :mouse_y int32 = GetMouseY();

		// 	// if mouse_x < WIDTH  * PIXEL_SCALE  &&
		// 	//    mouse_y < HEIGHT * PIXEL_SCALE &&
		// 	//    mouse_x >= 0 &&
		// 	//    mouse_y >= 0 {
		// 	// 	if IsMouseButtonDown(0) {
		// 	// 		:r int32 = mouse_y / PIXEL_SCALE;
		// 	// 		:c int32 = mouse_x / PIXEL_SCALE;

		// 	// 		image = apply_brush(image, brush, c, r);
		// 	// 	}
		// 	// }

		// 	// if IsKeyPressed(257) {
		// 	// 	// ** run model
		// 	// 	:image_input [784]f32;
		// 	// 	for(:r int32 = 0; r < HEIGHT; r++) {
		// 	// 		for(:c int32 = 0; c < WIDTH; c++) {
		// 	// 			image_input[r * WIDTH + c] = image[r][c];
		// 	// 		}
		// 	// 	}
		// 	// 		
		// 	// 	forward(neural_network, image_input, f_out);
		// 	// 	:probability_distribution []f32 = f_out.a[1];
		// 	// 
		// 	// 	for(:n int32 = 0; n < [int32]probability_distribution.len; n++) {
		// 	// 		printf("probability[%u]: %f\n".data, n, [f64]probability_distribution[n]);
		// 	// 	}

		// 	// 	printf("prediction: %u\n".data, max(probability_distribution));	


		// 	// 	// clear image
		// 	// 	for(:r int32 = 0; r < HEIGHT; r++) {
		// 	// 		for(:c int32 = 0; c < WIDTH; c++) {
		// 	// 			image[r][c] = 0.0;
		// 	// 		}
		// 	// 	}
		// 	// }

		// 	if IsKeyPressed(32) { // space
		// 		// next image
		// 		i++;
		// 		for(:r uint32 = 0; r < 28; r++) {
		// 			for(:c uint32 = 0; c < 28; c++) {
		// 				image[r][c] = distorted_image_set[i][r * 28 + c];
		// 			}
		// 		}
		// 	}

		// 	BeginDrawing();
		// 		ClearBackground(Color{
		// 			0xFF,
		// 			0xFF,
		// 			0xFF,
		// 			0xFF,
		// 		});
		// 		
		// 		for(:r int32 = 0; r < HEIGHT; r++) {
		// 			for(:c int32 = 0; c < WIDTH; c++) {
		// 				:pixel uint8= [uint8]((image[r][c] + 1.0) * 127.5);
		// 				DrawRectangle(c * PIXEL_SCALE, r * PIXEL_SCALE, PIXEL_SCALE, PIXEL_SCALE, Color{
		// 					pixel,
		// 					pixel,
		// 					pixel,
		// 					0xFF,
		// 				});
		// 				
		// 				// grid
		// 				DrawRectangleLines(c * PIXEL_SCALE, r * PIXEL_SCALE, PIXEL_SCALE, PIXEL_SCALE, Color{
		// 					0xFF, 
		// 					0x00, 
		// 					0x00, 
		// 					0x55,
		// 				});
		// 			}
		// 		}

		// 	EndDrawing();
		// }

		// CloseWindow();

		:cost  f32 = 0.0;
		:error f32 = 0.0;
		for(:i int32 = 0; i < [int32]distorted_image_set.len; i++) {
			forward(neural_network, distorted_image_set[i], f_out);
			back(neural_network, distorted_image_set[i], f_out.a, label_set[i], 0.001);
			
			:probability_distribution []f32 = f_out.a[1];

			:l f32 = loss(probability_distribution, label_set[i]);
			cost += l / [f32](i + 1 + [int32]distorted_image_set.len * epoch);
		
			:prediction uint64 = max(probability_distribution);
			if [uint8]prediction != labels[i] {
				error += 1.0 / [f32](i + 1 + [int32]distorted_image_set.len * epoch);
			}
	
			clear_line();
			print_status(epoch, i, l, cost, error);
		}
	
		// end of epoch
		// ** save checkpoint
		save_model("examples/softmax_mcnn/saved_models/model_checkpoint.bin", neural_network);
	}
}
